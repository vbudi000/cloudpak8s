{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./src/pages/mcm/edge/index.mdx"],"names":["PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn","_frontmatter","makeShortcode","name","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","Tabs","Tab","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-mcm-edge-index-mdx-689c16ccfbb1ee83863b.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug\n        .split('/')\n        .filter(Boolean)\n        .slice(-1)[0] || slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/cloudpak8s/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\nIn this section we will walk through the installation of the IBM \nEdge Computing Manager for Devices version 4. \n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Installing IBM Edge Computing Manager for Devices 4.0</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Post installation configuration</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Uninstalling IBM Edge Computing Manager for Devices 4.0</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Prerequisties`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Install IBM CP4MCM 1.3`}</li>\n      <li parentName=\"ol\">{`A macOS or Ubuntu Linux Host`}</li>\n      <li parentName=\"ol\">{`Openshift Client CLI `}<a parentName=\"li\" {...{\n          \"href\": \"https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.3/\"\n        }}>{`Download`}</a></li>\n      <li parentName=\"ol\">{`Jq `}<a parentName=\"li\" {...{\n          \"href\": \"https://stedolan.github.io/jq/download/\"\n        }}>{`Download`}</a></li>\n      <li parentName=\"ol\">{`git`}</li>\n      <li parentName=\"ol\">{`docker 1.13 +`}</li>\n      <li parentName=\"ol\">{`make`}</li>\n      <li parentName=\"ol\">{`Download following CLI tools from the ICP console\n`}<inlineCode parentName=\"li\">{`https://<ICP_CLUSTER_URL>/common-nav/cli`}</inlineCode><ol parentName=\"li\">\n          <li parentName=\"ol\">{`Kubernetes CLI (`}<strong parentName=\"li\">{`kubectl`}</strong>{`)`}</li>\n          <li parentName=\"ol\">{`Helm CLI(`}<strong parentName=\"li\">{`helm`}</strong>{`)`}</li>\n          <li parentName=\"ol\">{`IBM Cloud Pak CLI ( `}<strong parentName=\"li\">{`cloudctl`}</strong>{`)`}</li>\n        </ol></li>\n    </ol>\n    <h2>{`Installing IBM Edge Computing Manager for Devices 4.0`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Set the `}<inlineCode parentName=\"p\">{`ICP_CLUSTER_URL`}</inlineCode>{` environment variable. This value can be\nobtained from the output of the Management Hub install:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`export ICP_CLUSTER_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Connect to your cluster with cluster administrator privileges,\nselecting `}<strong parentName=\"p\">{`kube-system`}</strong>{` as the namespace and\n`}<strong parentName=\"p\">{`fill in the password`}</strong>{` you defined in the `}<inlineCode parentName=\"p\">{`config.yaml`}</inlineCode>{` file during the\nManagement Hub install:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{` cloudctl login -a $ICP_CLUSTER_URL -u admin -p <your-icp-admin-password> -n kube-system --skip-ssl-validation\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Define the image registry host, configure the Docker CLI to trust\nthe self-signed certificate: `}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{` export REGISTRY_HOST=$(oc get routes -n openshift-image-registry default-route -o jsonpath='{.spec.host}')\n`}</code></pre>\n   <InlineNotification mdxType=\"InlineNotification\">\n   Note: Please note on some clusters image registry might not have been exposed yet for first time, please run following optional command if you have issue with above command)\n   </InlineNotification>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{\"spec\":{\"defaultRoute\":true}}' --type=merge\n`}</code></pre>\n   <Tabs mdxType=\"Tabs\">\n   <Tab label=\"For MacOS\" mdxType=\"Tab\">\n            <p parentName=\"li\">{`   `}<strong parentName=\"p\">{`Trust the certificate`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`mkdir -p ~/.docker/certs.d/$REGISTRY_HOST && \\\\\necho | openssl s_client -showcerts -connect $REGISTRY_HOST:443 2>/dev/null | openssl x509 -outform PEM > ~/.docker/certs.d/$REGISTRY_HOST/ca.crt && \\\\\nsudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/.docker/certs.d/$REGISTRY_HOST/ca.crt\n`}</code></pre>\n            <p parentName=\"li\">{`   `}<strong parentName=\"p\">{`Restart the Docker service from the menu bar`}</strong></p>\n   </Tab>\n   \n   <Tab label=\"For Ubuntu\" mdxType=\"Tab\">\n            <p parentName=\"li\">{`   `}<strong parentName=\"p\">{`Trust the certificate`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`mkdir /etc/docker/certs.d/$REGISTRY_HOST && \\\\\necho | openssl s_client -showcerts -connect $REGISTRY_HOST:443 2>/dev/null | openssl x509 -outform PEM > /etc/docker/certs.d/$REGISTRY_HOST/ca.crt && \\\\\nsudo service docker restart\n`}</code></pre>\n   </Tab>\n   </Tabs>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Login to the OpenShift Container Platform 4.3.x image registry:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`docker login $REGISTRY_HOST -u $(oc whoami) -p $(oc whoami -t)\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Unpack the IBM Edge Computing Manager for Devices installation\ncompressed file that was downloaded from IBM Passport Advantage:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{` tar -zxvf ibm-ecm-4.0.0-x86_64.tar.gz && \\\\\n cd ibm-ecm-4.0.0-x86_64\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a new namespace `}<inlineCode parentName=\"p\">{`ibmcom`}</inlineCode>{`.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`oc new-project ibmcom\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Load the archive content into the catalog, and the images into\nthe registry’s `}<inlineCode parentName=\"p\">{`ibmcom`}</inlineCode>{` namespace:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`cloudctl catalog load-archive --archive ibm-ecm-prod-catalog-archive-4.0.0.tgz --registry $REGISTRY_HOST/ibmcom\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Extract the chart compressed file content to the current directory\nand move into the directory created:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`tar -O -zxvf ibm-ecm-prod-catalog-archive-4.0.0.tgz charts/ibm-ecm-prod-4.0.0.tgz | tar -zxvf - && \\\\\ncd ibm-ecm-prod\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install the Chart.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`./ibm_cloud_pak/pak_extensions/full-install/install-edge-computing.sh\n`}</code></pre>\n        <InlineNotification mdxType=\"InlineNotification\">\nDepending on your network speeds, it will take a  few minutes for the images to download, for pods to transition into  RUNNING state, and all of the services to become active.\n        </InlineNotification>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Verifying the Chart`}</strong></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The script above verifies that the pods are running and the  agbot and exchange are responding. Look for a “RUNNING” and “PASSED”  message towards the end of the installation.`}</li>\n          <li parentName=\"ul\">{`If “FAILED”, the output will ask you to look at specific logs for more information`}</li>\n          <li parentName=\"ul\">{`If “PASSED”, the output will show details of tests that were run, and two more items to verify          `}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`Browse to the IBM Edge Computing Manager UI console at the\nURL given at the end of the log. `}<inlineCode parentName=\"li\">{`https://<ICP_CLUSTER_URL>/edge`}</inlineCode></li>\n            </ul></li>\n        </ul>\n      </li>\n    </ol>\n    <h2>{`Post installation configuration`}</h2>\n    <InlineNotification mdxType=\"InlineNotification\">\nNote: Run the following commands from the same host where you ran the initial installation)\n    </InlineNotification>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Set the ICP_CLUSTER_URL environment variable. This value can be\nobtained from the output of the Management Hub install:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`export ICP_CLUSTER_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Connect to your cluster with cluster administrator privileges,\nselecting `}<strong parentName=\"p\">{`kube-system`}</strong>{` as the namespace and\n`}<strong parentName=\"p\">{`fill in the password`}</strong>{` you defined in the `}<inlineCode parentName=\"p\">{`config.yaml`}</inlineCode>{` file during the\nManagement Hub install:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`cloudctl login -a $CLUSTER_URL -u admin -p <your-icp-admin-password> -n kube-system --skip-ssl-validation\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install the `}<strong parentName=\"p\">{`hzn`}</strong>{` CLI with either the Ubuntu Linux or macOS package installers that are found under `}<strong parentName=\"p\">{`horizon-edge-packages`}</strong>{` in the appropriate OS/ARCH directory from the compressed content extracted in step 5 of the Installation process above:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Ubuntu Linux example:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`sudo dpkg -i horizon-edge-packages/linux/ubuntu/bionic/amd64/horizon-cli*.deb\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`macOS example:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`sudo installer -pkg horizon-edge-packages/macos/horizon-cli-*.pkg -target /\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Export the following variables that are needed for the next steps:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`export EXCHANGE_ROOT_PASS=$(oc -n kube-system get secret edge-computing -o jsonpath=\"{.data.exchange-config}\" | base64 --decode | jq -r .api.root.password)\nexport HZN_EXCHANGE_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')/ec-exchange/v1\nexport HZN_EXCHANGE_USER_AUTH=\"root/root:$EXCHANGE_ROOT_PASS\"\nexport HZN_ORG_ID=IBM\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run the following command to trust the OpenShift Container Platform 4.3 Certificate Authority:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{` oc --namespace kube-system get secret cluster-ca-cert -o jsonpath=\"{.data['tls\\\\.crt']}\" | base64 --decode > /tmp/icp-ca.crt\n`}</code></pre>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Ubuntu Linux example:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`sudo cp /tmp/icp-ca.crt /usr/local/share/ca-certificates && sudo update-ca-certificates\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`macOS example:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/icp-ca.crt\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run the following command to create a signing key pair.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{`hzn key create <company-name> <owner@email>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run the following command to confirm that the setup can communicate with the IBM Edge Computing Manager for Devices exchange API:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{` hzn exchange status\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Populate sample edge services by running the following command:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{` curl https://raw.githubusercontent.com/open-horizon/examples/v4.0/tools/exchangePublishScript.sh | bash\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run the following commands to view some of the services and policies  that were created in the IBM Edge Computing Manager for Devices  exchange:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-shell\"\n          }}>{` hzn exchange service list IBM/\n hzn exchange pattern list IBM/\n hzn exchange service listpolicy IBM/ibm.helloworld_1.0.0_amd64\n hzn exchange service listpolicy IBM/ibm.cpu2evtstreams_1.4.3_amd64\n`}</code></pre>\n      </li>\n    </ol>\n    <h2>{`Uninstalling IBM Edge Computing Manager for Devices 4.0`}</h2>\n    <p>{`Return to the location of the chart unpacked as part of installation`}<br parentName=\"p\"></br>{`\n`}{`and run the provided uninstall \tscript. This script will uninstall\nthe  helm release and all associated resources. First, login to the\ncluster  as a cluster administrator by using `}<strong parentName=\"p\">{`cloudctl`}</strong>{`, and then\nrun:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`./ibm_cloud_pak/pak_extensions/uninstall/uninstall-edge-computing.sh <cluster-name>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}