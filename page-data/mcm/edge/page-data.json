{"componentChunkName":"component---src-pages-mcm-edge-index-mdx","path":"/mcm/edge/","result":{"pageContext":{"frontmatter":{"title":"IBM Edge Computing Manager - Installation Guide","weight":400},"relativePagePath":"/mcm/edge/index.mdx","titleType":"page","MdxNode":{"id":"c5f764c9-2594-5088-a401-fb5a99de685c","children":[],"parent":"beb38b2e-9412-58c8-ad99-7b4e0e58dee0","internal":{"content":"---\ntitle: \"IBM Edge Computing Manager - Installation Guide\"\nweight: 400\n---\n\n<PageDescription>\nIn this section we will walk through the installation of the IBM \nEdge Computing Manager for Devices version 4. \n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Installing IBM Edge Computing Manager for Devices 4.0</AnchorLink>\n  <AnchorLink>Post installation configuration</AnchorLink>\n  <AnchorLink>Uninstalling IBM Edge Computing Manager for Devices 4.0</AnchorLink>\n</AnchorLinks>\n\n## Prerequisties\n\n1. Install IBM CP4MCM 1.3\n2. A macOS or Ubuntu Linux Host\n3. Openshift Client CLI [Download](https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.3/)\n4. Jq [Download](https://stedolan.github.io/jq/download/)\n5. git\n6. docker 1.13 +\n7. make\n8. Download following CLI tools from the ICP console \n`https://<ICP_CLUSTER_URL>/common-nav/cli`\n   1. Kubernetes CLI (**kubectl**)\n   2. Helm CLI(**helm**)\n   3. IBM Cloud Pak CLI ( **cloudctl**)\n\n## Installing IBM Edge Computing Manager for Devices 4.0\n\n1. Set the `ICP_CLUSTER_URL` environment variable. This value can be \nobtained from the output of the Management Hub install:\n\n   ```shell\n   export ICP_CLUSTER_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')\n   ```\n\n2. Connect to your cluster with cluster administrator privileges, \nselecting **kube-system** as the namespace and \n**fill in the password** you defined in the `config.yaml` file during the \nManagement Hub install:\n\n   ```shell\n    cloudctl login -a $ICP_CLUSTER_URL -u admin -p <your-icp-admin-password> -n kube-system --skip-ssl-validation\n   ```\n\n3. Define the image registry host, configure the Docker CLI to trust \nthe self-signed certificate: \n\n   ```shell\n    export REGISTRY_HOST=$(oc get routes -n openshift-image-registry default-route -o jsonpath='{.spec.host}')\n   ```\n\n   <InlineNotification>\n   Note: Please note on some clusters image registry might not have been exposed yet for first time, please run following optional command if you have issue with above command)\n   </InlineNotification>\n\n   ```shell\n   oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{\"spec\":{\"defaultRoute\":true}}' --type=merge\n   ```\n\n   <Tabs>\n\n   <Tab label=\"For MacOS\">\n\n   **Trust the certificate**\n\n   ```\n   mkdir -p ~/.docker/certs.d/$REGISTRY_HOST && \\\n   echo | openssl s_client -showcerts -connect $REGISTRY_HOST:443 2>/dev/null | openssl x509 -outform PEM > ~/.docker/certs.d/$REGISTRY_HOST/ca.crt && \\\n   sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/.docker/certs.d/$REGISTRY_HOST/ca.crt\n   ```\n    \n   **Restart the Docker service from the menu bar**\n\n   </Tab>\n   \n   <Tab label=\"For Ubuntu\">\n\n   **Trust the certificate**\n\n   ```\n   mkdir /etc/docker/certs.d/$REGISTRY_HOST && \\\n   echo | openssl s_client -showcerts -connect $REGISTRY_HOST:443 2>/dev/null | openssl x509 -outform PEM > /etc/docker/certs.d/$REGISTRY_HOST/ca.crt && \\\n   sudo service docker restart\n   ```\n    \n   </Tab>\n\n   </Tabs>\n\n4. Login to the OpenShift Container Platform 4.3.x image registry:\n\n   ```shell\n   docker login $REGISTRY_HOST -u $(oc whoami) -p $(oc whoami -t)\n   ```\n\n5. Unpack the IBM Edge Computing Manager for Devices installation \ncompressed file that was downloaded from IBM Passport Advantage:\n\n   ```shell\n    tar -zxvf ibm-ecm-4.0.0-x86_64.tar.gz && \\\n    cd ibm-ecm-4.0.0-x86_64\n   ```\n\n6. Create a new namespace `ibmcom`.\n\n   ```shell\n   oc new-project ibmcom\n   ```\n\n7. Load the archive content into the catalog, and the images into \nthe registry's `ibmcom` namespace:\n\n   ```shell\n   cloudctl catalog load-archive --archive ibm-ecm-prod-catalog-archive-4.0.0.tgz --registry $REGISTRY_HOST/ibmcom\n   ```\n\n8. Extract the chart compressed file content to the current directory \nand move into the directory created:\n\n   ```shell\n   tar -O -zxvf ibm-ecm-prod-catalog-archive-4.0.0.tgz charts/ibm-ecm-prod-4.0.0.tgz | tar -zxvf - && \\\n   cd ibm-ecm-prod\n   ```\n\n9. Install the Chart.\n\n   ```bash\n   ./ibm_cloud_pak/pak_extensions/full-install/install-edge-computing.sh\n   ```\n\n   <InlineNotification>\n   Depending on your network speeds, it will take a  few minutes for the images to download, for pods to transition into  RUNNING state, and all of the services to become active.\n   </InlineNotification>\n\n   **Verifying the Chart**\n\n   - The script above verifies that the pods are running and the  agbot and exchange are responding. Look for a \"RUNNING\" and \"PASSED\"  message towards the end of the installation.\n   - If \"FAILED\", the output will ask you to look at specific logs for more information\n   - If \"PASSED\", the output will show details of tests that were run, and two more items to verify          \n     - Browse to the IBM Edge Computing Manager UI console at the \n     URL given at the end of the log. `https://<ICP_CLUSTER_URL>/edge`\n\n## Post installation configuration\n\n<InlineNotification>\nNote: Run the following commands from the same host where you ran the initial installation)\n</InlineNotification>\n\n1. Set the ICP_CLUSTER_URL environment variable. This value can be \nobtained from the output of the Management Hub install:\n\n   ```shell\n   export ICP_CLUSTER_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')\n   ```\n\n2. Connect to your cluster with cluster administrator privileges, \nselecting **kube-system** as the namespace and \n**fill in the password** you defined in the `config.yaml` file during the \nManagement Hub install:\n\n   ```shell\n   cloudctl login -a $CLUSTER_URL -u admin -p <your-icp-admin-password> -n kube-system --skip-ssl-validation\n   ```\n\n3. Install the **hzn** CLI with either the Ubuntu Linux or macOS package installers that are found under **horizon-edge-packages** in the appropriate OS/ARCH directory from the compressed content extracted in step 5 of the Installation process above:\n\n   - Ubuntu Linux example:\n\n     ```shell\n     sudo dpkg -i horizon-edge-packages/linux/ubuntu/bionic/amd64/horizon-cli*.deb\n     ```\n\n   - macOS example:\n\n     ```shell\n     sudo installer -pkg horizon-edge-packages/macos/horizon-cli-*.pkg -target /\n     ```\n\n4. Export the following variables that are needed for the next steps:\n\n   ```shell\n   export EXCHANGE_ROOT_PASS=$(oc -n kube-system get secret edge-computing -o jsonpath=\"{.data.exchange-config}\" | base64 --decode | jq -r .api.root.password)\n   export HZN_EXCHANGE_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')/ec-exchange/v1\n   export HZN_EXCHANGE_USER_AUTH=\"root/root:$EXCHANGE_ROOT_PASS\"\n   export HZN_ORG_ID=IBM\n   ```\n\n5. Run the following command to trust the OpenShift Container Platform 4.3 Certificate Authority:\n\n   ```shell\n    oc --namespace kube-system get secret cluster-ca-cert -o jsonpath=\"{.data['tls\\.crt']}\" | base64 --decode > /tmp/icp-ca.crt\n   ```\n\n   - Ubuntu Linux example:\n\n     ```shell\n     sudo cp /tmp/icp-ca.crt /usr/local/share/ca-certificates && sudo update-ca-certificates\n     ```\n\n   - macOS example:\n\n     ```shell\n     sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/icp-ca.crt\n     ```\n\n6. Run the following command to create a signing key pair.\n\n   ```shell\n   hzn key create <company-name> <owner@email>\n   ```\n\n7. Run the following command to confirm that the setup can communicate with the IBM Edge Computing Manager for Devices exchange API:\n\n   ```shell\n    hzn exchange status\n   ```\n\n8. Populate sample edge services by running the following command:\n\n   ```shell\n    curl https://raw.githubusercontent.com/open-horizon/examples/v4.0/tools/exchangePublishScript.sh | bash\n   ```\n\n9. Run the following commands to view some of the services and policies  that were created in the IBM Edge Computing Manager for Devices  exchange:\n\n   ```shell\n    hzn exchange service list IBM/\n    hzn exchange pattern list IBM/\n    hzn exchange service listpolicy IBM/ibm.helloworld_1.0.0_amd64\n    hzn exchange service listpolicy IBM/ibm.cpu2evtstreams_1.4.3_amd64\n   ```\n\n## Uninstalling IBM Edge Computing Manager for Devices 4.0\n\nReturn to the location of the chart unpacked as part of installation  \nand run the provided uninstall \tscript. This script will uninstall \nthe  helm release and all associated resources. First, login to the \ncluster  as a cluster administrator by using **cloudctl**, and then \nrun:\n\n```shell\n./ibm_cloud_pak/pak_extensions/uninstall/uninstall-edge-computing.sh <cluster-name>\n```\n","type":"Mdx","contentDigest":"514ea5f4decb0346211ee2290512260f","counter":533,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"IBM Edge Computing Manager - Installation Guide","weight":400},"exports":{},"rawBody":"---\ntitle: \"IBM Edge Computing Manager - Installation Guide\"\nweight: 400\n---\n\n<PageDescription>\nIn this section we will walk through the installation of the IBM \nEdge Computing Manager for Devices version 4. \n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Installing IBM Edge Computing Manager for Devices 4.0</AnchorLink>\n  <AnchorLink>Post installation configuration</AnchorLink>\n  <AnchorLink>Uninstalling IBM Edge Computing Manager for Devices 4.0</AnchorLink>\n</AnchorLinks>\n\n## Prerequisties\n\n1. Install IBM CP4MCM 1.3\n2. A macOS or Ubuntu Linux Host\n3. Openshift Client CLI [Download](https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.3/)\n4. Jq [Download](https://stedolan.github.io/jq/download/)\n5. git\n6. docker 1.13 +\n7. make\n8. Download following CLI tools from the ICP console \n`https://<ICP_CLUSTER_URL>/common-nav/cli`\n   1. Kubernetes CLI (**kubectl**)\n   2. Helm CLI(**helm**)\n   3. IBM Cloud Pak CLI ( **cloudctl**)\n\n## Installing IBM Edge Computing Manager for Devices 4.0\n\n1. Set the `ICP_CLUSTER_URL` environment variable. This value can be \nobtained from the output of the Management Hub install:\n\n   ```shell\n   export ICP_CLUSTER_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')\n   ```\n\n2. Connect to your cluster with cluster administrator privileges, \nselecting **kube-system** as the namespace and \n**fill in the password** you defined in the `config.yaml` file during the \nManagement Hub install:\n\n   ```shell\n    cloudctl login -a $ICP_CLUSTER_URL -u admin -p <your-icp-admin-password> -n kube-system --skip-ssl-validation\n   ```\n\n3. Define the image registry host, configure the Docker CLI to trust \nthe self-signed certificate: \n\n   ```shell\n    export REGISTRY_HOST=$(oc get routes -n openshift-image-registry default-route -o jsonpath='{.spec.host}')\n   ```\n\n   <InlineNotification>\n   Note: Please note on some clusters image registry might not have been exposed yet for first time, please run following optional command if you have issue with above command)\n   </InlineNotification>\n\n   ```shell\n   oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{\"spec\":{\"defaultRoute\":true}}' --type=merge\n   ```\n\n   <Tabs>\n\n   <Tab label=\"For MacOS\">\n\n   **Trust the certificate**\n\n   ```\n   mkdir -p ~/.docker/certs.d/$REGISTRY_HOST && \\\n   echo | openssl s_client -showcerts -connect $REGISTRY_HOST:443 2>/dev/null | openssl x509 -outform PEM > ~/.docker/certs.d/$REGISTRY_HOST/ca.crt && \\\n   sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/.docker/certs.d/$REGISTRY_HOST/ca.crt\n   ```\n    \n   **Restart the Docker service from the menu bar**\n\n   </Tab>\n   \n   <Tab label=\"For Ubuntu\">\n\n   **Trust the certificate**\n\n   ```\n   mkdir /etc/docker/certs.d/$REGISTRY_HOST && \\\n   echo | openssl s_client -showcerts -connect $REGISTRY_HOST:443 2>/dev/null | openssl x509 -outform PEM > /etc/docker/certs.d/$REGISTRY_HOST/ca.crt && \\\n   sudo service docker restart\n   ```\n    \n   </Tab>\n\n   </Tabs>\n\n4. Login to the OpenShift Container Platform 4.3.x image registry:\n\n   ```shell\n   docker login $REGISTRY_HOST -u $(oc whoami) -p $(oc whoami -t)\n   ```\n\n5. Unpack the IBM Edge Computing Manager for Devices installation \ncompressed file that was downloaded from IBM Passport Advantage:\n\n   ```shell\n    tar -zxvf ibm-ecm-4.0.0-x86_64.tar.gz && \\\n    cd ibm-ecm-4.0.0-x86_64\n   ```\n\n6. Create a new namespace `ibmcom`.\n\n   ```shell\n   oc new-project ibmcom\n   ```\n\n7. Load the archive content into the catalog, and the images into \nthe registry's `ibmcom` namespace:\n\n   ```shell\n   cloudctl catalog load-archive --archive ibm-ecm-prod-catalog-archive-4.0.0.tgz --registry $REGISTRY_HOST/ibmcom\n   ```\n\n8. Extract the chart compressed file content to the current directory \nand move into the directory created:\n\n   ```shell\n   tar -O -zxvf ibm-ecm-prod-catalog-archive-4.0.0.tgz charts/ibm-ecm-prod-4.0.0.tgz | tar -zxvf - && \\\n   cd ibm-ecm-prod\n   ```\n\n9. Install the Chart.\n\n   ```bash\n   ./ibm_cloud_pak/pak_extensions/full-install/install-edge-computing.sh\n   ```\n\n   <InlineNotification>\n   Depending on your network speeds, it will take a  few minutes for the images to download, for pods to transition into  RUNNING state, and all of the services to become active.\n   </InlineNotification>\n\n   **Verifying the Chart**\n\n   - The script above verifies that the pods are running and the  agbot and exchange are responding. Look for a \"RUNNING\" and \"PASSED\"  message towards the end of the installation.\n   - If \"FAILED\", the output will ask you to look at specific logs for more information\n   - If \"PASSED\", the output will show details of tests that were run, and two more items to verify          \n     - Browse to the IBM Edge Computing Manager UI console at the \n     URL given at the end of the log. `https://<ICP_CLUSTER_URL>/edge`\n\n## Post installation configuration\n\n<InlineNotification>\nNote: Run the following commands from the same host where you ran the initial installation)\n</InlineNotification>\n\n1. Set the ICP_CLUSTER_URL environment variable. This value can be \nobtained from the output of the Management Hub install:\n\n   ```shell\n   export ICP_CLUSTER_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')\n   ```\n\n2. Connect to your cluster with cluster administrator privileges, \nselecting **kube-system** as the namespace and \n**fill in the password** you defined in the `config.yaml` file during the \nManagement Hub install:\n\n   ```shell\n   cloudctl login -a $CLUSTER_URL -u admin -p <your-icp-admin-password> -n kube-system --skip-ssl-validation\n   ```\n\n3. Install the **hzn** CLI with either the Ubuntu Linux or macOS package installers that are found under **horizon-edge-packages** in the appropriate OS/ARCH directory from the compressed content extracted in step 5 of the Installation process above:\n\n   - Ubuntu Linux example:\n\n     ```shell\n     sudo dpkg -i horizon-edge-packages/linux/ubuntu/bionic/amd64/horizon-cli*.deb\n     ```\n\n   - macOS example:\n\n     ```shell\n     sudo installer -pkg horizon-edge-packages/macos/horizon-cli-*.pkg -target /\n     ```\n\n4. Export the following variables that are needed for the next steps:\n\n   ```shell\n   export EXCHANGE_ROOT_PASS=$(oc -n kube-system get secret edge-computing -o jsonpath=\"{.data.exchange-config}\" | base64 --decode | jq -r .api.root.password)\n   export HZN_EXCHANGE_URL=https://$(oc get routes -n kube-system icp-console -o jsonpath='{.spec.host}')/ec-exchange/v1\n   export HZN_EXCHANGE_USER_AUTH=\"root/root:$EXCHANGE_ROOT_PASS\"\n   export HZN_ORG_ID=IBM\n   ```\n\n5. Run the following command to trust the OpenShift Container Platform 4.3 Certificate Authority:\n\n   ```shell\n    oc --namespace kube-system get secret cluster-ca-cert -o jsonpath=\"{.data['tls\\.crt']}\" | base64 --decode > /tmp/icp-ca.crt\n   ```\n\n   - Ubuntu Linux example:\n\n     ```shell\n     sudo cp /tmp/icp-ca.crt /usr/local/share/ca-certificates && sudo update-ca-certificates\n     ```\n\n   - macOS example:\n\n     ```shell\n     sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/icp-ca.crt\n     ```\n\n6. Run the following command to create a signing key pair.\n\n   ```shell\n   hzn key create <company-name> <owner@email>\n   ```\n\n7. Run the following command to confirm that the setup can communicate with the IBM Edge Computing Manager for Devices exchange API:\n\n   ```shell\n    hzn exchange status\n   ```\n\n8. Populate sample edge services by running the following command:\n\n   ```shell\n    curl https://raw.githubusercontent.com/open-horizon/examples/v4.0/tools/exchangePublishScript.sh | bash\n   ```\n\n9. Run the following commands to view some of the services and policies  that were created in the IBM Edge Computing Manager for Devices  exchange:\n\n   ```shell\n    hzn exchange service list IBM/\n    hzn exchange pattern list IBM/\n    hzn exchange service listpolicy IBM/ibm.helloworld_1.0.0_amd64\n    hzn exchange service listpolicy IBM/ibm.cpu2evtstreams_1.4.3_amd64\n   ```\n\n## Uninstalling IBM Edge Computing Manager for Devices 4.0\n\nReturn to the location of the chart unpacked as part of installation  \nand run the provided uninstall \tscript. This script will uninstall \nthe  helm release and all associated resources. First, login to the \ncluster  as a cluster administrator by using **cloudctl**, and then \nrun:\n\n```shell\n./ibm_cloud_pak/pak_extensions/uninstall/uninstall-edge-computing.sh <cluster-name>\n```\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/cloudpak8s/src/pages/mcm/edge/index.mdx"}}}}