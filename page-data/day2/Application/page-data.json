{"componentChunkName":"component---src-pages-day-2-application-index-mdx","path":"/day2/Application/","result":{"pageContext":{"frontmatter":{"title":"OpenShift Platform Day2 - Application Management","description":"OpenShift Day2 Application","keywords":"OpenShift, day2, application"},"relativePagePath":"/day2/Application/index.mdx","titleType":"page","MdxNode":{"id":"602c6128-dc44-5224-9278-8d6b709119b6","children":[],"parent":"64880e1a-1300-5017-931b-bfdee196cf5b","internal":{"content":"---\ntitle: OpenShift Platform Day2 - Application Management\ndescription: OpenShift Day2 Application\nkeywords: 'OpenShift, day2, application'\n---\n\n## Application Management Overview\nDeveloping applications in a modern environment like OpenShift calls for modern application development practices like DevOps. With this comes increased Developer responsibility to understand and utilize advanced techniques for their application. In creating services that compose the application Developers use templates that provide guide rails to assure services adhere to established architectural designs. Advanced development may utilize things such as a [service mesh](https://docs.openshift.com/container-platform/4.3/service_mesh/service_mesh_arch/understanding-ossm.html). The Developer uses such basic building blocks to deliver functional code for the application. \nIn collaboration the SRE and/or DevOps team  delivers the non functional requirements that addresses reliability and availability requirements of the service. These two roles deliver the overall application management through the life cycle of an application.  \n\n## Application Life Cycle\n\nWhen establishing an application life cycle in an OpenShift environment there will be a need to manage certain aspects of that application such as routing its traffic, setting up developers to work with a given service, and adding new components to an application or service. There are multiple methods to accomplish these tasks within OpenShift depending on the complexity of the application. For more complex applications usage of [templates](https://docs.openshift.com/container-platform/4.3/applications/service_brokers/installing-template-service-broker.html) may be desirable. These templates can be based on standards established during the architecture stage. \n\nAfter initial application creation the DevOps and SRE perform routine maintenance tasks or service management. This includes critical functions such as [monitoring](../Monitoring), [logging](../Logging) and [builds](../BuildDeploy). \n\nFor Application Management there are a plethora of choices to implement and maintain your application. Key to modern application management calls for DevOps and SREs to work together. There are many topics throughout this document that describes how to use various tools to create applications. \n\n\n## Guidance for on-boarding a new application\n\nThe following is a checklist of what needs to be considered when you are onboarding a new application in the OpenShift environment.  Some of the topics in this checklist can be automated.  Most of the chapters in this repository are related to this topic, and links have been provided.\n- Does the application require to be deployed on separate resources? Or do you need to create specific resources for the application? The resources that you might want to consider are:\n  - __namespace__. Does it need to run on an isolated namespace? please refer to [Build and Deploy](../BuildDeploy) chapter.\n  - __subnetwork__. Do you have any security or performance concerns?  Please refer to [Network](../Network) chapter. \n  - Do you need specific __ingress__ policy or __route__ defined?  More information can be found in the [Network](../Network) chapter as well.\n  - __resource limit__. This will ensure that the application will not consume too much cluster resources than allocated.  Please refer to our [Capacity](../Capacity) chapter.\n  - __storage__.  Will the cluster storage be able to support the application requirement? Please see our [Storage](../Storage) chapter.\n  - __role__, __group__, __user__, __service accounts__, and __scc__ . These are described in the [User Management](../User) chapter.\n  - Are there any __security__ related resources that need to be created? Check our [Security](../Security) chapter.\n- As a recommended practice perform the following:\n  - __Externalized its environment variables__.  This will help the maintenance and reconfiguration of the application.  It will also make the migration from different environments (dev, test, pre-prod, prod) easier.\n  - Define __the liveness and the readiness__ probe.  More information can be found in the [Kubernetes Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).\n  - Validate your backup by performing __restore__ operations.  [Backups](../Backups) chapter describes more on this activity.\n  - Verify that the cluster's __Logging__ and __Monitoring__ tools will pick up the related information from the application.\n  - Ensure that you have your [__pruning__](https://docs.openshift.com/container-platform/4.3/applications/pruning-objects.html) policy for the application data defined. \n  - Does the application require specific compute resources? Does it need to be run on a specific node located at a specific zone?  If yes, then you need to define the node placement, which is covered in the [Node](../Node) chapter.\n  \n- The following are optional components that you might want to consider:\n  - Once you have ensured that Prometheus is picking up the metrics, then you might want to use the __metering__ component to start the application usage collection and reporting.  Please refer to our [Metering](../Metering) chapter.\n  - If your cluster has configured the __service mesh__ component, then you might want to consider to use it for the application.  \n- The following are more related to building the application itself rather than deploying it; however, it is listed to ensure that the DevOps team helps to enable better operation of the application:\n  - Have you exposed the metrics of the application?  More information about **Build to Manage** can be found in the [Build and Deploy](../BuildDeploy) chapter.\n  - Pods are not privileged and should not run as root.  In fact, OpenShift 4.x will not allow privileged user pod to run.\n  - Do not use a Docker community-contributed build.  Only use certified and trusted containers. This is discussed in the [Build and Deploy](../BuildDeploy) chapter.\n\n## References\n\n- https://docs.openshift.com/container-platform/4.3/applications/projects/working-with-projects.html  \n- https://docs.openshift.com/container-platform/4.3/applications/application-life-cycle-management/odc-creating-applications-using-developer-perspective.html  \n- https://docs.openshift.com/container-platform/4.3/applications/application-health.html  \n- https://docs.openshift.com/container-platform/4.3/applications/idling-applications.html  \n- https://docs.openshift.com/container-platform/4.3/applications/pruning-objects.html  \n\n\n\n","type":"Mdx","contentDigest":"03eab1b5342284e457d4a84d844a686a","counter":471,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"OpenShift Platform Day2 - Application Management","description":"OpenShift Day2 Application","keywords":"OpenShift, day2, application"},"exports":{},"rawBody":"---\ntitle: OpenShift Platform Day2 - Application Management\ndescription: OpenShift Day2 Application\nkeywords: 'OpenShift, day2, application'\n---\n\n## Application Management Overview\nDeveloping applications in a modern environment like OpenShift calls for modern application development practices like DevOps. With this comes increased Developer responsibility to understand and utilize advanced techniques for their application. In creating services that compose the application Developers use templates that provide guide rails to assure services adhere to established architectural designs. Advanced development may utilize things such as a [service mesh](https://docs.openshift.com/container-platform/4.3/service_mesh/service_mesh_arch/understanding-ossm.html). The Developer uses such basic building blocks to deliver functional code for the application. \nIn collaboration the SRE and/or DevOps team  delivers the non functional requirements that addresses reliability and availability requirements of the service. These two roles deliver the overall application management through the life cycle of an application.  \n\n## Application Life Cycle\n\nWhen establishing an application life cycle in an OpenShift environment there will be a need to manage certain aspects of that application such as routing its traffic, setting up developers to work with a given service, and adding new components to an application or service. There are multiple methods to accomplish these tasks within OpenShift depending on the complexity of the application. For more complex applications usage of [templates](https://docs.openshift.com/container-platform/4.3/applications/service_brokers/installing-template-service-broker.html) may be desirable. These templates can be based on standards established during the architecture stage. \n\nAfter initial application creation the DevOps and SRE perform routine maintenance tasks or service management. This includes critical functions such as [monitoring](../Monitoring), [logging](../Logging) and [builds](../BuildDeploy). \n\nFor Application Management there are a plethora of choices to implement and maintain your application. Key to modern application management calls for DevOps and SREs to work together. There are many topics throughout this document that describes how to use various tools to create applications. \n\n\n## Guidance for on-boarding a new application\n\nThe following is a checklist of what needs to be considered when you are onboarding a new application in the OpenShift environment.  Some of the topics in this checklist can be automated.  Most of the chapters in this repository are related to this topic, and links have been provided.\n- Does the application require to be deployed on separate resources? Or do you need to create specific resources for the application? The resources that you might want to consider are:\n  - __namespace__. Does it need to run on an isolated namespace? please refer to [Build and Deploy](../BuildDeploy) chapter.\n  - __subnetwork__. Do you have any security or performance concerns?  Please refer to [Network](../Network) chapter. \n  - Do you need specific __ingress__ policy or __route__ defined?  More information can be found in the [Network](../Network) chapter as well.\n  - __resource limit__. This will ensure that the application will not consume too much cluster resources than allocated.  Please refer to our [Capacity](../Capacity) chapter.\n  - __storage__.  Will the cluster storage be able to support the application requirement? Please see our [Storage](../Storage) chapter.\n  - __role__, __group__, __user__, __service accounts__, and __scc__ . These are described in the [User Management](../User) chapter.\n  - Are there any __security__ related resources that need to be created? Check our [Security](../Security) chapter.\n- As a recommended practice perform the following:\n  - __Externalized its environment variables__.  This will help the maintenance and reconfiguration of the application.  It will also make the migration from different environments (dev, test, pre-prod, prod) easier.\n  - Define __the liveness and the readiness__ probe.  More information can be found in the [Kubernetes Documentation](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/).\n  - Validate your backup by performing __restore__ operations.  [Backups](../Backups) chapter describes more on this activity.\n  - Verify that the cluster's __Logging__ and __Monitoring__ tools will pick up the related information from the application.\n  - Ensure that you have your [__pruning__](https://docs.openshift.com/container-platform/4.3/applications/pruning-objects.html) policy for the application data defined. \n  - Does the application require specific compute resources? Does it need to be run on a specific node located at a specific zone?  If yes, then you need to define the node placement, which is covered in the [Node](../Node) chapter.\n  \n- The following are optional components that you might want to consider:\n  - Once you have ensured that Prometheus is picking up the metrics, then you might want to use the __metering__ component to start the application usage collection and reporting.  Please refer to our [Metering](../Metering) chapter.\n  - If your cluster has configured the __service mesh__ component, then you might want to consider to use it for the application.  \n- The following are more related to building the application itself rather than deploying it; however, it is listed to ensure that the DevOps team helps to enable better operation of the application:\n  - Have you exposed the metrics of the application?  More information about **Build to Manage** can be found in the [Build and Deploy](../BuildDeploy) chapter.\n  - Pods are not privileged and should not run as root.  In fact, OpenShift 4.x will not allow privileged user pod to run.\n  - Do not use a Docker community-contributed build.  Only use certified and trusted containers. This is discussed in the [Build and Deploy](../BuildDeploy) chapter.\n\n## References\n\n- https://docs.openshift.com/container-platform/4.3/applications/projects/working-with-projects.html  \n- https://docs.openshift.com/container-platform/4.3/applications/application-life-cycle-management/odc-creating-applications-using-developer-perspective.html  \n- https://docs.openshift.com/container-platform/4.3/applications/application-health.html  \n- https://docs.openshift.com/container-platform/4.3/applications/idling-applications.html  \n- https://docs.openshift.com/container-platform/4.3/applications/pruning-objects.html  \n\n\n\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/cloudpak8s/src/pages/day2/Application/index.mdx"}}}}