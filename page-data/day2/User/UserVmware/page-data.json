{"componentChunkName":"component---src-pages-day-2-user-user-vmware-index-mdx","path":"/day2/User/UserVmware/","result":{"pageContext":{"frontmatter":{"title":"User Management - VMware","description":"OCP Day2 User","keywords":"ocp, day2, user"},"relativePagePath":"/day2/User/UserVmware/index.mdx","titleType":"page","MdxNode":{"id":"3a34516c-ca73-5fc3-b7b9-d5920de0efea","children":[],"parent":"d353f721-807d-57ce-92f9-377a6063ad16","internal":{"content":"---\ntitle: User Management - VMware\ndescription: OCP Day2 User\nkeywords: 'ocp, day2, user'\n---\n\n# IAM settings for OpenShift on VMware\nAfter you build your OpenShift cluster on VMware, by defauilt, the user **kubeadmin** \nexists on your cluster.  That is the only user and you can use it temporarilyy. \nWhen you login to the OpenShift dashboard, you will see the warning message \nbelow. \n\n![kubeadmin](/assets/img/day2/kubeadmin.png)\n\nOn OpenShift on VMWare, several Identity Providers are supported such as \n**Basic Authentication**, **LDAP**, **OpenID**, **HTPasswd**, and others. To \nspecify an identity provider, you must create a Custom Resource (CR) that \ndescribes that identity provider and add it to the cluster.  \n\n\nThe identity provider for OpenShift that is simplest to use is **HTPasswd**, \nwhich uses user passwords stored in the cluster etcd storage as a secret. In \nthis document, we will demonstrate how to add users with the \n**HTPasswd** identity provider.　　\n\n\n## Configuring an HTPasswd identity provider\nTo define an **HTPasswd** identity provider you must perform the following steps:\n1. Create an **htpasswd** file to store the user and password information. \nInstructions are provided for [MacOS](#create-an-htpassword-file-on-macos) \nand [Linux](#create-an-htpassword-file-on-linux).\n2. Create an OpenShift Container Platform secret to represent the **htpasswd** \nfile.\n3. Define the **HTPasswd** identity provider resource.\n4. Apply the resource to the default OAuth configuration.  \n\n\n## Create an htpasswd file\nTo use the **HTPasswd** identity provider, you must generate a flat file that \ncontains the user names and passwords for your cluster by using **htpasswd**.  \n\n### Prerequisites\nHave access to the **htpasswd** utility. On Red Hat Enterprise Linux this is \navailable by installing the **httpd-tools** package.  \n\n### Procedure\n1. Create or update your flat file with a user name and hashed password:\n    ```\n    $ htpasswd -c -B -b </path/to/users.htpasswd> <user_name> <password> \n    The command generates a hashed version of the password.\n    ```\n2. Continue to add or update credentials to the file:\n    ```\n    $ htpasswd -b </path/to/users.htpasswd> <user_name> <password>   \n    ```\n   \n   NOTE: if updating an old file, drop the -c.\n\n<a name=\"create-an-htpassword-file-on-macos\"></a>\n\n### Create an htpasswd file on MacOS\n\nFor example, we created an **htpasswd** file on Mac as follows:  \n\n```\n$ htpasswd -c -B -b users.htpasswd kenueno MyPassword!\nAdding password for user kenueno\n$ \n$ htpasswd -b users.htpasswd rstoner MyPassword!\nAdding password for user rstoner\n$ \n```\n\n<a name=\"create-an-htpassword-file-on-linux\"></a>\n\n### Create an htpasswd file on Linux\nHere is an example to create an **htpasswd** file on Linux.\n\n```\n$ touch htpasswd\n$ \n$ htpasswd -Bb htpasswd alice 'p4ssw0rd'\nAdding password for user alice\n$ \n$ htpasswd -Bb htpasswd bob 'p4ssw0rd'\nAdding password for user bob\n$ \n$ htpasswd -Bb htpasswd claire 'p4ssw0rd'\nAdding password for user claire\n$ \n```\n\nNote that if you don't have the **htpasswd** command on your Linux \n(CentOS, in our case), here is how you install it.\n```\n# yum install httpd-tools\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirror.dal.nexril.net\n * epel: pubmirror2.math.uh.edu\n * extras: mirror.dal.nexril.net\n * updates: mirror.dal.nexril.net\nResolving Dependencies\n--> Running transaction check\n---> Package httpd-tools.x86_64 0:2.4.6-90.el7.centos will be installed\n--> Processing Dependency: libaprutil-1.so.0()(64bit) for package: httpd-tools-2.4.6-90.el7.centos.x86_64\n--> Processing Dependency: libapr-1.so.0()(64bit) for package: httpd-tools-2.4.6-90.el7.centos.x86_64\n--> Running transaction check\n---> Package apr.x86_64 0:1.4.8-5.el7 will be installed\n---> Package apr-util.x86_64 0:1.5.2-6.el7 will be installed\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n===============================================================================================================================================\n Package                            Arch                          Version                                    Repository                   Size\n===============================================================================================================================================\nInstalling:\n httpd-tools                        x86_64                        2.4.6-90.el7.centos                        base                         91 k\nInstalling for dependencies:\n apr                                x86_64                        1.4.8-5.el7                                base                        103 k\n apr-util                           x86_64                        1.5.2-6.el7                                base                         92 k\n\nTransaction Summary\n===============================================================================================================================================\nInstall  1 Package (+2 Dependent packages)\n\nTotal download size: 286 k\nInstalled size: 584 k\nIs this ok [y/d/N]: y\nDownloading packages:\n(1/3): httpd-tools-2.4.6-90.el7.centos.x86_64.rpm                                                                       |  91 kB  00:00:00     \n(2/3): apr-1.4.8-5.el7.x86_64.rpm                                                                                       | 103 kB  00:00:00     \n(3/3): apr-util-1.5.2-6.el7.x86_64.rpm                                                                                  |  92 kB  00:00:00     \n-----------------------------------------------------------------------------------------------------------------------------------------------\nTotal                                                                                                          650 kB/s | 286 kB  00:00:00     \nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : apr-1.4.8-5.el7.x86_64                                                                                                      1/3 \n  Installing : apr-util-1.5.2-6.el7.x86_64                                                                                                 2/3 \n  Installing : httpd-tools-2.4.6-90.el7.centos.x86_64                                                                                      3/3 \n  Verifying  : apr-1.4.8-5.el7.x86_64                                                                                                      1/3 \n  Verifying  : httpd-tools-2.4.6-90.el7.centos.x86_64                                                                                      2/3 \n  Verifying  : apr-util-1.5.2-6.el7.x86_64                                                                                                 3/3 \n\nInstalled:\n  httpd-tools.x86_64 0:2.4.6-90.el7.centos                                                                                                     \n\nDependency Installed:\n  apr.x86_64 0:1.4.8-5.el7                                            apr-util.x86_64 0:1.5.2-6.el7                                           \n\nComplete!\n# \n# which htpasswd\n/usr/bin/htpasswd\n# \n```\n\n\n## Creating the HTPasswd Secret\nTo use the HTPasswd identity provider, you must define a secret that contains \nthe HTPasswd user file.  \n\n### Prerequisites\nCreate an HTPasswd file.  \n\n### Procedure\nCreate an OpenShift Container Platform Secret that contains the HTPasswd \nusers file.\n```\n$ oc create secret generic htpass-secret --from-file=htpasswd=</path/to/users.htpasswd> -n openshift-config\n```\n\nIn the previous example, we created a file called **htpasswd**.  We will create a \nsecret from that file as follow.  \n```\n$ oc create secret generic htpasswd --from-file=htpasswd -n openshift-config\nsecret/htpasswd created\n$\n```\n\nCreate the manifest for the cluster secret. This is used by the authentication \nprovider to read the individual credentials.\nThis as a dry run to create a file for the manifest because the secret should \nexist already.\n\n```\noc create secret generic htpasswd-secret --from-file=htpasswd=./openshift.htpasswd  --namespace openshift-config --dry-run  --output yaml > ./htpass-secret.yaml  \n```\nReplace the existing secret, this could be done as a pipe from the previous \ncommand.\n```\noc replace --filename ./htpass-secret.yaml  \n```\n\n\nThen, create a yaml file for the Custom Resource (CR) as follow.\n``` \n$ vi oauth-config.yaml\n$ cat oauth-config.yaml \napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  name: cluster\nspec:\n  identityProviders:\n  - name: Local Password\n    mappingMethod: claim\n    type: HTPasswd\n    htpasswd:\n      fileData:\n        name: htpasswd\n$ \n```\n### Sample HTPasswd CR\nThe following Custom Resource (CR) shows the parameters and acceptable values for an HTPasswd identity provider. \n![htpasswd_yaml](/assets/img/day2/htpasswd_yaml.png)\n\n\n## Apply the custom resource of identity provider to the default OAuth configuration\nAdd an identity provider so your users can authenticate.  \n\n### Prerequisites\nCreate an OpenShift Container Platform cluster.\nCreate the Custom Resource (CR) for your identity providers.\nYou must be logged in as an administrator.  \n\n### Procedure\n1. Apply the defined CR:  \n    ```\n    $ oc apply -f </path/to/CR>  \n    ```\n\n   or you can use `oc replace` as follows:\n    ```\n    $ oc replace -f oauth-config.yaml\n    oauth.config.openshift.io/cluster replaced\n    ```\n\n   Note: If a CR does not exist, `oc apply` creates a new CR and might \n   trigger the following warning:  \n    ```\n    Warning: oc apply should be used on resources created by either oc create --save-config or oc apply\n    ```\n\n   In this case you can safely ignore this warning.  \n\n2. Log in to the cluster as a user from your identity provider, entering the \npassword when prompted.\n   ```\n   $ oc login -u <username>  \n   ```\n\n3. Confirm that the user logged in successfully, and display the user name.  \n    ```\n    $ oc whoami  \n    ```\n\n\n## Configuring identity providers using the web console \nConfigure your identity provider (IDP) through the web console instead of the \nCLI.  \n\n### Prerequisites\nYou must be logged in to the web console as a cluster administrator.  \n\n### Procedure\n1. Navigate to **Administration → Cluster Settings**.\n2. Under the **Global Configuration** tab, click **OAuth**.  \n\n   ![htpasswd1](/assets/img/day2/htpasswd_GUI_1.png)\n\n3. Under the **Identity Providers** section, select your identity provider \nfrom the **Add** drop-down menu. \n\n   ![htpasswd2](/assets/img/day2/htpasswd_GUI_2.png)  \n\n   ![htpasswd3](/assets/img/day2/htpasswd_GUI_3.png)  \n\n   ![htpasswd4](/assets/img/day2/htpasswd_GUI_4.png)  \n\n\n   Note: You can specify multiple IDPs through the web console without \noverwriting existing IDPs.\n\n   Before adding the HTPasswd, the yml file was something like this.\n```\napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  annotations:\n    release.openshift.io/create-only: 'true'\n  creationTimestamp: '2019-11-21T04:10:10Z'\n  generation: 1\n  name: cluster\n  resourceVersion: '1755'\n  selfLink: /apis/config.openshift.io/v1/oauths/cluster\n  uid: cf3d67c0-0c14-11ea-bbad-005056a57cfd\nspec: {}\n```  \n\nAfter the HTPasswd was added, the yml file was updated as follows.\n```\napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  annotations:\n    release.openshift.io/create-only: 'true'\n  creationTimestamp: '2019-11-21T04:10:10Z'\n  generation: 2\n  name: cluster\n  resourceVersion: '3123929'\n  selfLink: /apis/config.openshift.io/v1/oauths/cluster\n  uid: cf3d67c0-0c14-11ea-bbad-005056a57cfd\nspec:\n  identityProviders:\n    - htpasswd:\n        fileData:\n          name: htpasswd-h89hn\n      mappingMethod: claim\n      name: htpasswd\n      type: HTPasswd\n```  \n  \n  \nWe would like to mention one more thing. Here is the scenario. \nWe create 3 users such as **alice**, **bob**, and \n**claire** with htpasswd as follows.\n```\n$ htpasswd -Bb htpasswd alice 'p4ssw0rd'\nAdding password for user alice\n$ htpasswd -Bb htpasswd bob 'p4ssw0rd'\nAdding password for user bob\n$ htpasswd -Bb htpasswd claire 'p4ssw0rd'\nAdding password for user claire\n$ oc --user=admin create secret generic htpasswd --from-file=htpasswd -n openshift-config\nsecret/htpasswd created\n$ vi oauth-config.yaml\n$ cat oauth-config.yaml \napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  name: cluster\nspec:\n  identityProviders:\n  - name: Local Password\n    mappingMethod: claim\n    type: HTPasswd\n    htpasswd:\n      fileData:\n        name: htpasswd\n$ oc --user=admin replace -f oauth-config.yaml\noauth.config.openshift.io/cluster replaced\n$ \n```\nNow, we have 3 users created and will use the htpasswd for the authentication. Both **alice** and **bob** logged in the cluster successfully with their password.  However, the user **claire** has not logged in the cluster yet.\nAt this moment, here is what you see with oc commands.\n\n```\n$ oc --user=admin get users\nNAME     UID                                    FULL NAME        IDENTITIES\nalice    962fdf1e-1848-11ea-a3e1-0a580a80011d                    Local Password:alice\nbob      d0d4f046-1845-11ea-a3e1-0a580a80011d                    Local Password:bob\n\n$\n$ oc --user=admin get identities\nNAME                                                                                                          IDP NAME         IDP USER NAME                                                                                    USER NAME   USER UID\nLocal Password:alice                                                                                          Local Password   alice                                                                                            alice       962fdf1e-1848-11ea-a3e1-0a580a80011d\nLocal Password:bob                                                                                            Local Password   bob                                                                                              bob         d0d4f046-1845-11ea-a3e1-0a580a80011d\n$ \n```\nNo user or identity for **claire** appears because user objects are created on first login.  \n\n\n## Disable kubeadmin Account\nSince you will not need the **kubeadmin** account to be active in your OpenShift \ncluster any more, you would disable the **kubeadmin** account by removing the \npassword secret. Here are the steps to disable the **kubeadmin** account.  \n\n### Set up cluster admin access to your user ID.\nBefore you disable the **kubeadmin** account, you need to set up the \ncluster admin access to your user.  \nCopy the **kubeconfig** file created by the OpenShift installation to your \nuser’s **~/.kube/config** location.\n```\n$ cp -p <OCP_installation_dir>/auth/kubeconfig <your_user_$HOME>/.kube/config\n```\nLogin with your user and run the `oc whoami` command as follows. \nIn our case, our user is **bob**.\n```\n$ oc login -u bob -p p4ssw0rd\nLogin successful.\n\nYou don't have any projects. You can try to create a new project, by running\n\n    oc new-project <projectname>\n\n$ \n$ oc whoami\nbob\n$ \n```\nThen, you will run the oc command with the **--user=admin** option to confirm \nthat your **kubeconfig** admin user corresponds to the **system:admin** \ncluster account as follows.\n```\n$ oc --user=admin whoami\nsystem:admin\n$ \n```  \n\nNow, you have access as the **system:admin** account using the \n**kubeconfig** installer file.\n\n### Delete the kubeadmin secret from the kube-system namespace.\nHere is the command output in our environment.\n```\n$ oc --user=admin delete secret kubeadmin -n kube-system\nsecret \"kubeadmin\" deleted\n```\n### Confirm that the kubeadmin user is no longer accessible.\nYou need to have the password of **kubeadmin** user to login via the CLI. \nYou can find it in the **kubeadmin-password** file under \nthe **<installation_dir>/auth** directory.  \n```\ncat <installation_dir>/auth/kubeadmin-password\n```  \n\nYou can get the API URL with the `oc whoami` command as follows.\n```\n$oc whoami --show-server\n```\nThen, you run the `oc login` command with the **kubeadmin** user.  \nHere is the command output in our environment.\n```\n$ oc login -u kubeadmin -p \"$KUBEADMIN_PASSWORD\" \"$API_URL\"\nLogin failed (401 Unauthorized)\nVerify you have provided correct credentials.\n```\n### Confirm that system:admin account is still available with the TLS authentication.\nRun the `oc whoami` command with **--user=admin** to confirm that the \n**system:admin** account is still available as follows.\n\n```\n$ oc --user=admin whoami\nsystem:admin\n$ \n```  \n\n## Maintain (Add/Remove) Users as Day 2 operation\nAt the moment, you havd completed the user onboarding task with an HTPasswd \nidentity provider. As a Day 2 operation, you may need to maintain users in \nyour cluster. For example, you would periodically add/remove users due to \norganization changes, job assigment changes, users leaving the company, etc. \nYou probably would like to do such tasks as a batch job and run it once a day at \nnight, for example.  We will show you how to do it. \n","type":"Mdx","contentDigest":"deca999c56b11698309e3ff651241158","counter":555,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"User Management - VMware","description":"OCP Day2 User","keywords":"ocp, day2, user"},"exports":{},"rawBody":"---\ntitle: User Management - VMware\ndescription: OCP Day2 User\nkeywords: 'ocp, day2, user'\n---\n\n# IAM settings for OpenShift on VMware\nAfter you build your OpenShift cluster on VMware, by defauilt, the user **kubeadmin** \nexists on your cluster.  That is the only user and you can use it temporarilyy. \nWhen you login to the OpenShift dashboard, you will see the warning message \nbelow. \n\n![kubeadmin](/assets/img/day2/kubeadmin.png)\n\nOn OpenShift on VMWare, several Identity Providers are supported such as \n**Basic Authentication**, **LDAP**, **OpenID**, **HTPasswd**, and others. To \nspecify an identity provider, you must create a Custom Resource (CR) that \ndescribes that identity provider and add it to the cluster.  \n\n\nThe identity provider for OpenShift that is simplest to use is **HTPasswd**, \nwhich uses user passwords stored in the cluster etcd storage as a secret. In \nthis document, we will demonstrate how to add users with the \n**HTPasswd** identity provider.　　\n\n\n## Configuring an HTPasswd identity provider\nTo define an **HTPasswd** identity provider you must perform the following steps:\n1. Create an **htpasswd** file to store the user and password information. \nInstructions are provided for [MacOS](#create-an-htpassword-file-on-macos) \nand [Linux](#create-an-htpassword-file-on-linux).\n2. Create an OpenShift Container Platform secret to represent the **htpasswd** \nfile.\n3. Define the **HTPasswd** identity provider resource.\n4. Apply the resource to the default OAuth configuration.  \n\n\n## Create an htpasswd file\nTo use the **HTPasswd** identity provider, you must generate a flat file that \ncontains the user names and passwords for your cluster by using **htpasswd**.  \n\n### Prerequisites\nHave access to the **htpasswd** utility. On Red Hat Enterprise Linux this is \navailable by installing the **httpd-tools** package.  \n\n### Procedure\n1. Create or update your flat file with a user name and hashed password:\n    ```\n    $ htpasswd -c -B -b </path/to/users.htpasswd> <user_name> <password> \n    The command generates a hashed version of the password.\n    ```\n2. Continue to add or update credentials to the file:\n    ```\n    $ htpasswd -b </path/to/users.htpasswd> <user_name> <password>   \n    ```\n   \n   NOTE: if updating an old file, drop the -c.\n\n<a name=\"create-an-htpassword-file-on-macos\"></a>\n\n### Create an htpasswd file on MacOS\n\nFor example, we created an **htpasswd** file on Mac as follows:  \n\n```\n$ htpasswd -c -B -b users.htpasswd kenueno MyPassword!\nAdding password for user kenueno\n$ \n$ htpasswd -b users.htpasswd rstoner MyPassword!\nAdding password for user rstoner\n$ \n```\n\n<a name=\"create-an-htpassword-file-on-linux\"></a>\n\n### Create an htpasswd file on Linux\nHere is an example to create an **htpasswd** file on Linux.\n\n```\n$ touch htpasswd\n$ \n$ htpasswd -Bb htpasswd alice 'p4ssw0rd'\nAdding password for user alice\n$ \n$ htpasswd -Bb htpasswd bob 'p4ssw0rd'\nAdding password for user bob\n$ \n$ htpasswd -Bb htpasswd claire 'p4ssw0rd'\nAdding password for user claire\n$ \n```\n\nNote that if you don't have the **htpasswd** command on your Linux \n(CentOS, in our case), here is how you install it.\n```\n# yum install httpd-tools\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirror.dal.nexril.net\n * epel: pubmirror2.math.uh.edu\n * extras: mirror.dal.nexril.net\n * updates: mirror.dal.nexril.net\nResolving Dependencies\n--> Running transaction check\n---> Package httpd-tools.x86_64 0:2.4.6-90.el7.centos will be installed\n--> Processing Dependency: libaprutil-1.so.0()(64bit) for package: httpd-tools-2.4.6-90.el7.centos.x86_64\n--> Processing Dependency: libapr-1.so.0()(64bit) for package: httpd-tools-2.4.6-90.el7.centos.x86_64\n--> Running transaction check\n---> Package apr.x86_64 0:1.4.8-5.el7 will be installed\n---> Package apr-util.x86_64 0:1.5.2-6.el7 will be installed\n--> Finished Dependency Resolution\n\nDependencies Resolved\n\n===============================================================================================================================================\n Package                            Arch                          Version                                    Repository                   Size\n===============================================================================================================================================\nInstalling:\n httpd-tools                        x86_64                        2.4.6-90.el7.centos                        base                         91 k\nInstalling for dependencies:\n apr                                x86_64                        1.4.8-5.el7                                base                        103 k\n apr-util                           x86_64                        1.5.2-6.el7                                base                         92 k\n\nTransaction Summary\n===============================================================================================================================================\nInstall  1 Package (+2 Dependent packages)\n\nTotal download size: 286 k\nInstalled size: 584 k\nIs this ok [y/d/N]: y\nDownloading packages:\n(1/3): httpd-tools-2.4.6-90.el7.centos.x86_64.rpm                                                                       |  91 kB  00:00:00     \n(2/3): apr-1.4.8-5.el7.x86_64.rpm                                                                                       | 103 kB  00:00:00     \n(3/3): apr-util-1.5.2-6.el7.x86_64.rpm                                                                                  |  92 kB  00:00:00     \n-----------------------------------------------------------------------------------------------------------------------------------------------\nTotal                                                                                                          650 kB/s | 286 kB  00:00:00     \nRunning transaction check\nRunning transaction test\nTransaction test succeeded\nRunning transaction\n  Installing : apr-1.4.8-5.el7.x86_64                                                                                                      1/3 \n  Installing : apr-util-1.5.2-6.el7.x86_64                                                                                                 2/3 \n  Installing : httpd-tools-2.4.6-90.el7.centos.x86_64                                                                                      3/3 \n  Verifying  : apr-1.4.8-5.el7.x86_64                                                                                                      1/3 \n  Verifying  : httpd-tools-2.4.6-90.el7.centos.x86_64                                                                                      2/3 \n  Verifying  : apr-util-1.5.2-6.el7.x86_64                                                                                                 3/3 \n\nInstalled:\n  httpd-tools.x86_64 0:2.4.6-90.el7.centos                                                                                                     \n\nDependency Installed:\n  apr.x86_64 0:1.4.8-5.el7                                            apr-util.x86_64 0:1.5.2-6.el7                                           \n\nComplete!\n# \n# which htpasswd\n/usr/bin/htpasswd\n# \n```\n\n\n## Creating the HTPasswd Secret\nTo use the HTPasswd identity provider, you must define a secret that contains \nthe HTPasswd user file.  \n\n### Prerequisites\nCreate an HTPasswd file.  \n\n### Procedure\nCreate an OpenShift Container Platform Secret that contains the HTPasswd \nusers file.\n```\n$ oc create secret generic htpass-secret --from-file=htpasswd=</path/to/users.htpasswd> -n openshift-config\n```\n\nIn the previous example, we created a file called **htpasswd**.  We will create a \nsecret from that file as follow.  \n```\n$ oc create secret generic htpasswd --from-file=htpasswd -n openshift-config\nsecret/htpasswd created\n$\n```\n\nCreate the manifest for the cluster secret. This is used by the authentication \nprovider to read the individual credentials.\nThis as a dry run to create a file for the manifest because the secret should \nexist already.\n\n```\noc create secret generic htpasswd-secret --from-file=htpasswd=./openshift.htpasswd  --namespace openshift-config --dry-run  --output yaml > ./htpass-secret.yaml  \n```\nReplace the existing secret, this could be done as a pipe from the previous \ncommand.\n```\noc replace --filename ./htpass-secret.yaml  \n```\n\n\nThen, create a yaml file for the Custom Resource (CR) as follow.\n``` \n$ vi oauth-config.yaml\n$ cat oauth-config.yaml \napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  name: cluster\nspec:\n  identityProviders:\n  - name: Local Password\n    mappingMethod: claim\n    type: HTPasswd\n    htpasswd:\n      fileData:\n        name: htpasswd\n$ \n```\n### Sample HTPasswd CR\nThe following Custom Resource (CR) shows the parameters and acceptable values for an HTPasswd identity provider. \n![htpasswd_yaml](/assets/img/day2/htpasswd_yaml.png)\n\n\n## Apply the custom resource of identity provider to the default OAuth configuration\nAdd an identity provider so your users can authenticate.  \n\n### Prerequisites\nCreate an OpenShift Container Platform cluster.\nCreate the Custom Resource (CR) for your identity providers.\nYou must be logged in as an administrator.  \n\n### Procedure\n1. Apply the defined CR:  \n    ```\n    $ oc apply -f </path/to/CR>  \n    ```\n\n   or you can use `oc replace` as follows:\n    ```\n    $ oc replace -f oauth-config.yaml\n    oauth.config.openshift.io/cluster replaced\n    ```\n\n   Note: If a CR does not exist, `oc apply` creates a new CR and might \n   trigger the following warning:  \n    ```\n    Warning: oc apply should be used on resources created by either oc create --save-config or oc apply\n    ```\n\n   In this case you can safely ignore this warning.  \n\n2. Log in to the cluster as a user from your identity provider, entering the \npassword when prompted.\n   ```\n   $ oc login -u <username>  \n   ```\n\n3. Confirm that the user logged in successfully, and display the user name.  \n    ```\n    $ oc whoami  \n    ```\n\n\n## Configuring identity providers using the web console \nConfigure your identity provider (IDP) through the web console instead of the \nCLI.  \n\n### Prerequisites\nYou must be logged in to the web console as a cluster administrator.  \n\n### Procedure\n1. Navigate to **Administration → Cluster Settings**.\n2. Under the **Global Configuration** tab, click **OAuth**.  \n\n   ![htpasswd1](/assets/img/day2/htpasswd_GUI_1.png)\n\n3. Under the **Identity Providers** section, select your identity provider \nfrom the **Add** drop-down menu. \n\n   ![htpasswd2](/assets/img/day2/htpasswd_GUI_2.png)  \n\n   ![htpasswd3](/assets/img/day2/htpasswd_GUI_3.png)  \n\n   ![htpasswd4](/assets/img/day2/htpasswd_GUI_4.png)  \n\n\n   Note: You can specify multiple IDPs through the web console without \noverwriting existing IDPs.\n\n   Before adding the HTPasswd, the yml file was something like this.\n```\napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  annotations:\n    release.openshift.io/create-only: 'true'\n  creationTimestamp: '2019-11-21T04:10:10Z'\n  generation: 1\n  name: cluster\n  resourceVersion: '1755'\n  selfLink: /apis/config.openshift.io/v1/oauths/cluster\n  uid: cf3d67c0-0c14-11ea-bbad-005056a57cfd\nspec: {}\n```  \n\nAfter the HTPasswd was added, the yml file was updated as follows.\n```\napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  annotations:\n    release.openshift.io/create-only: 'true'\n  creationTimestamp: '2019-11-21T04:10:10Z'\n  generation: 2\n  name: cluster\n  resourceVersion: '3123929'\n  selfLink: /apis/config.openshift.io/v1/oauths/cluster\n  uid: cf3d67c0-0c14-11ea-bbad-005056a57cfd\nspec:\n  identityProviders:\n    - htpasswd:\n        fileData:\n          name: htpasswd-h89hn\n      mappingMethod: claim\n      name: htpasswd\n      type: HTPasswd\n```  \n  \n  \nWe would like to mention one more thing. Here is the scenario. \nWe create 3 users such as **alice**, **bob**, and \n**claire** with htpasswd as follows.\n```\n$ htpasswd -Bb htpasswd alice 'p4ssw0rd'\nAdding password for user alice\n$ htpasswd -Bb htpasswd bob 'p4ssw0rd'\nAdding password for user bob\n$ htpasswd -Bb htpasswd claire 'p4ssw0rd'\nAdding password for user claire\n$ oc --user=admin create secret generic htpasswd --from-file=htpasswd -n openshift-config\nsecret/htpasswd created\n$ vi oauth-config.yaml\n$ cat oauth-config.yaml \napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  name: cluster\nspec:\n  identityProviders:\n  - name: Local Password\n    mappingMethod: claim\n    type: HTPasswd\n    htpasswd:\n      fileData:\n        name: htpasswd\n$ oc --user=admin replace -f oauth-config.yaml\noauth.config.openshift.io/cluster replaced\n$ \n```\nNow, we have 3 users created and will use the htpasswd for the authentication. Both **alice** and **bob** logged in the cluster successfully with their password.  However, the user **claire** has not logged in the cluster yet.\nAt this moment, here is what you see with oc commands.\n\n```\n$ oc --user=admin get users\nNAME     UID                                    FULL NAME        IDENTITIES\nalice    962fdf1e-1848-11ea-a3e1-0a580a80011d                    Local Password:alice\nbob      d0d4f046-1845-11ea-a3e1-0a580a80011d                    Local Password:bob\n\n$\n$ oc --user=admin get identities\nNAME                                                                                                          IDP NAME         IDP USER NAME                                                                                    USER NAME   USER UID\nLocal Password:alice                                                                                          Local Password   alice                                                                                            alice       962fdf1e-1848-11ea-a3e1-0a580a80011d\nLocal Password:bob                                                                                            Local Password   bob                                                                                              bob         d0d4f046-1845-11ea-a3e1-0a580a80011d\n$ \n```\nNo user or identity for **claire** appears because user objects are created on first login.  \n\n\n## Disable kubeadmin Account\nSince you will not need the **kubeadmin** account to be active in your OpenShift \ncluster any more, you would disable the **kubeadmin** account by removing the \npassword secret. Here are the steps to disable the **kubeadmin** account.  \n\n### Set up cluster admin access to your user ID.\nBefore you disable the **kubeadmin** account, you need to set up the \ncluster admin access to your user.  \nCopy the **kubeconfig** file created by the OpenShift installation to your \nuser’s **~/.kube/config** location.\n```\n$ cp -p <OCP_installation_dir>/auth/kubeconfig <your_user_$HOME>/.kube/config\n```\nLogin with your user and run the `oc whoami` command as follows. \nIn our case, our user is **bob**.\n```\n$ oc login -u bob -p p4ssw0rd\nLogin successful.\n\nYou don't have any projects. You can try to create a new project, by running\n\n    oc new-project <projectname>\n\n$ \n$ oc whoami\nbob\n$ \n```\nThen, you will run the oc command with the **--user=admin** option to confirm \nthat your **kubeconfig** admin user corresponds to the **system:admin** \ncluster account as follows.\n```\n$ oc --user=admin whoami\nsystem:admin\n$ \n```  \n\nNow, you have access as the **system:admin** account using the \n**kubeconfig** installer file.\n\n### Delete the kubeadmin secret from the kube-system namespace.\nHere is the command output in our environment.\n```\n$ oc --user=admin delete secret kubeadmin -n kube-system\nsecret \"kubeadmin\" deleted\n```\n### Confirm that the kubeadmin user is no longer accessible.\nYou need to have the password of **kubeadmin** user to login via the CLI. \nYou can find it in the **kubeadmin-password** file under \nthe **<installation_dir>/auth** directory.  \n```\ncat <installation_dir>/auth/kubeadmin-password\n```  \n\nYou can get the API URL with the `oc whoami` command as follows.\n```\n$oc whoami --show-server\n```\nThen, you run the `oc login` command with the **kubeadmin** user.  \nHere is the command output in our environment.\n```\n$ oc login -u kubeadmin -p \"$KUBEADMIN_PASSWORD\" \"$API_URL\"\nLogin failed (401 Unauthorized)\nVerify you have provided correct credentials.\n```\n### Confirm that system:admin account is still available with the TLS authentication.\nRun the `oc whoami` command with **--user=admin** to confirm that the \n**system:admin** account is still available as follows.\n\n```\n$ oc --user=admin whoami\nsystem:admin\n$ \n```  \n\n## Maintain (Add/Remove) Users as Day 2 operation\nAt the moment, you havd completed the user onboarding task with an HTPasswd \nidentity provider. As a Day 2 operation, you may need to maintain users in \nyour cluster. For example, you would periodically add/remove users due to \norganization changes, job assigment changes, users leaving the company, etc. \nYou probably would like to do such tasks as a batch job and run it once a day at \nnight, for example.  We will show you how to do it. \n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/cloudpak8s/src/pages/day2/User/UserVmware/index.mdx"}}}}