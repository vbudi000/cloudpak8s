{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./src/pages/mcm/cp4mcm_cloudforms/index.mdx"],"names":["PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn","_frontmatter","makeShortcode","name","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-mcm-cp-4-mcm-cloudforms-index-mdx-38cb2e43644760dd5b28.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug\n        .split('/')\n        .filter(Boolean)\n        .slice(-1)[0] || slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/cloudpak8s/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`This section covers installing Red Hat CloudForms 5.0 for Cloud Pak\nfor Multicloud Management.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Initialize CloudForms server</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Configure LDAP Authentication in MCM Console</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Integrate CloudForms server with Cloud Pak for MultiCloud Management</AnchorLink>\n    </AnchorLinks>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Update:`}</strong>{` This document was recently updated to include Cloud Pak for\nMultiCloud Mangement v1.3.`}</p>\n    </InlineNotification>\n    <h2>{`Required files`}</h2>\n    <p>{`The files from Passport Advantage site for RedHat CloudForms 5 are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Red Hat CloudForms 5 for for IBM Cloud App Management 20.0.1 Multiplatform English eAssembly (CJ78FEN)`}</li>\n    </ul>\n    <p>{`It contains the disk image for the Red Hat CloudForms 5 appliance for various\nplatforms and the integration to IBM Cloud Pak for MultiCloud\nManagement 1.3.\nOther formats such as AWS and Azure disk images are available from\nRed Hat in\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/products/red-hat-cloudforms/\"\n      }}>{`https://access.redhat.com/products/red-hat-cloudforms/`}</a>{`.`}</p>\n    <h2>{`Initialize CloudForms server`}</h2>\n    <p>{`Follow the instructions for restoring Red Hat CloudForms 5 appliance from:\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/documentation/en-US/Red_Hat_CloudForms/5.0/\"\n      }}>{`https://access.redhat.com/documentation/en-US/Red_Hat_CloudForms/5.0/`}</a>{`.`}</p>\n    <p>{`The following summary steps demonstrate configuring Red Hat CloudForms 5\nappliance on Amazon AWS.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Using the image `}<inlineCode parentName=\"p\">{`cfme-ec2-5.11.4.2-1.x86_64.zip`}</inlineCode>{` extract the vhd file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`unzip cfme-ec2-5.11.4.2-1.x86_64.zip\n`}</code></pre>\n        <p parentName=\"li\">{`Store the VHD file into an S3 bucket, (such as `}<inlineCode parentName=\"p\">{`rh-cloudforms5`}</inlineCode>{`).`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`aws s3 cp cfme-ec2-5.11.4.2-1.x86_64.vhd s3://rh-cloudforms5\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create the `}<inlineCode parentName=\"p\">{`vmimport`}</inlineCode>{` role for loading an disk snapshot to AWS.  Create `}<inlineCode parentName=\"p\">{`trust-policy.json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`role-policy.json`}</inlineCode>{` as outlined below.`}</p>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`trust-policy.json`}</inlineCode></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n        \"Effect\": \"Allow\",\n        \"Principal\": { \"Service\": \"vmie.amazonaws.com\" },\n        \"Action\": \"sts:AssumeRole\",\n        \"Condition\": {\n            \"StringEquals\":{\n              \"sts:Externalid\": \"vmimport\"\n            }\n        }\n      }\n  ]\n}\n`}</code></pre>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`role-policy.json`}</inlineCode>{` (change the S3 bucket name to the name you used before).`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n  {\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"s3:ListAllMyBuckets\"\n    ],\n    \"Resource\": \"*\"\n  },\n  {\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"s3:CreateBucket\",\n      \"s3:DeleteBucket\",\n      \"s3:DeleteObject\",\n      \"s3:GetBucketLocation\",\n      \"s3:GetObject\",\n      \"s3:ListBucket\",\n      \"s3:PutObject\"\n    ],\n    \"Resource\": [\"arn:aws:s3:::BUCKET_TO_UPLOAD_IMAGE\",\"arn:aws:s3:::BUCKET_TO_UPLOAD_IMAGE/*\"]\n  },\n  {\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"iam:CreateRole\",\n      \"iam:PutRolePolicy\"\n    ],\n    \"Resource\": \"*\"\n  },\n  {\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"ec2:CancelConversionTask\",\n      \"ec2:CancelExportTask\",\n      \"ec2:CreateImage\",\n      \"ec2:CreateInstanceExportTask\",\n      \"ec2:CreateTags\",\n      \"ec2:DeleteTags\",\n      \"ec2:DescribeConversionTasks\",\n      \"ec2:DescribeExportTasks\",\n      \"ec2:DescribeExportImageTasks\",\n      \"ec2:DescribeInstanceAttribute\",\n      \"ec2:DescribeInstanceStatus\",\n      \"ec2:DescribeInstances\",\n      \"ec2:DescribeTags\",\n      \"ec2:ExportImage\",\n      \"ec2:ImportInstance\",\n      \"ec2:ImportVolume\",\n      \"ec2:StartInstances\",\n      \"ec2:StopInstances\",\n      \"ec2:TerminateInstances\",\n      \"ec2:ImportImage\",\n      \"ec2:ImportSnapshot\",\n      \"ec2:DescribeImportImageTasks\",\n      \"ec2:DescribeImportSnapshotTasks\",\n      \"ec2:CancelImportTask\"\n    ],\n    \"Resource\": \"*\"\n  }\n]\n}\n`}</code></pre>\n        <p parentName=\"li\">{`Create the vmimport role:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`aws iam create-role --role-name vmimport --assume-role-policy-document file://trust-policy.json\naws iam put-role-policy --role-name vmimport --policy-name vmimport --policy-document file://role-policy.json\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Load the snapshot using the file `}<inlineCode parentName=\"p\">{`container.json`}</inlineCode>{`:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`{\n  \"Description\": \"RedHat CloudForms 5\",\n  \"Format\": \"vhd\",\n  \"UserBucket\": {\n      \"S3Bucket\": \"BUCKET WITH UPLOADED .VHD IMAGE\",\n      \"S3Key\": \"cfme-ec2-5.11.4.2-1.x86_64.vhd\"\n  }\n}\n`}</code></pre>\n        <p parentName=\"li\">{`Run the load:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`aws ec2 import-snapshot --disk-container file://containers.json\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Check that the load has completed. `}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`aws ec2 describe-import-snapshot-tasks --import-task-ids < task id >\n`}</code></pre>\n        <p parentName=\"li\">{`Use the Web UI to create a new AMI from the Snapshot that you uploaded,\nor run the following command.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`aws ec2 register-image\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a Security group that will allow access to port 22 (ssh) and\nport 443 (https). Use the security group for launching an instance of\nRed Hat CloudForms 5. Make sure you allocate an additional disk for the\nPostgreSQL database.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use a terminal window to SSH into the CloudForms instance.\nInitialize the server. The process below uses an embedded PostgreSQL\ndatabase for a standalone CloudForms server.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Login to the appliance`}</li>\n          <li parentName=\"ul\">{`Run the `}<inlineCode parentName=\"li\">{`appliance_console`}</inlineCode>{` command`}</li>\n          <li parentName=\"ul\">{`Select the options `}<strong parentName=\"li\">{`[5]`}{` Configure Database`}</strong>{` > `}<strong parentName=\"li\">{`[1]`}{` Create key`}</strong>{` >\n`}<strong parentName=\"li\">{`[1]`}{` Create Internal Database`}</strong>{` > `}<strong parentName=\"li\">{`[1]`}{` /dev/xvdb`}</strong></li>\n          <li parentName=\"ul\">{`Answer `}<strong parentName=\"li\">{`N`}</strong>{` for `}<inlineCode parentName=\"li\">{`Should this appliance run as a standalone database server?`}</inlineCode></li>\n          <li parentName=\"ul\">{`Assign a postgreSQL password and verify`}</li>\n          <li parentName=\"ul\">{`Answer `}<strong parentName=\"li\">{`0`}</strong>{` for the database region number`}</li>\n          <li parentName=\"ul\">{`Wait until the database is initialized`}</li>\n          <li parentName=\"ul\">{`Back in the main menu, select `}<strong parentName=\"li\">{`[14]`}{` Start CFME server`}</strong>{`\nand then `}<strong parentName=\"li\">{`[19]`}{` Exit`}</strong></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Try logging into the CloudForms server using port 443.\nLogin as `}<inlineCode parentName=\"p\">{`admin`}</inlineCode>{` and password of `}<inlineCode parentName=\"p\">{`smartvm`}</inlineCode>{`.`}</p>\n      </li>\n    </ol>\n    <h2>{`Configure LDAP Authentication in MCM Console`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.3.0/iam/3.4.0/configure_ldap.html\"\n      }}>{`Configure LDAP`}</a></p>\n    <h2>{`Integrate CloudForms server with Cloud Pak for MultiCloud Management`}</h2>\n    <p>{`For this configuration we will use the following variables.  Replace them with yours.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`CLOUDFORMS_CLIENT_ID`}</strong>{`: a string with your cloudforms client id.  Can be anything randomly generated.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`CLOUDFORMS_CLIENT_SECRET`}</strong>{`: a string with your cloudforms client secret.  Can be anything randomly generated.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ICP_CONSOLE`}</strong>{`: FQDN for the MCM icp-console.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`CLOUDFORMS_HOST`}</strong>{`: IP Address or FQDN of your CloudForms server`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`CLOUDFORMS_PASSPHRASE`}</strong>{`: a string with a cloudforms passphrase.  Can be anything randomly generated.`}</li>\n    </ul>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a file `}<inlineCode parentName=\"p\">{`registration.json`}</inlineCode>{`:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`  {\n    \"token_endpoint_auth_method\":\"client_secret_basic\",\n    \"client_id\": \"$CLOUDFORMS_CLIENT_ID\",\n    \"client_secret\": \"$CLOUDFORMS_CLIENT_SECRET\",\n    \"scope\":\"openid profile email\",\n    \"grant_types\":[\n      \"authorization_code\",\n      \"client_credentials\",\n      \"password\",\n      \"implicit\",\n      \"refresh_token\",\n      \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"response_types\":[\n      \"code\",\n      \"token\",\n      \"id_token token\"\n    ],\n    \"application_type\":\"web\",\n    \"subject_type\":\"public\",\n    \"post_logout_redirect_uris\":[\n      \"https://$ICP_CONSOLE/\"\n    ],\n    \"preauthorized_scope\":\"openid profile email general\",\n    \"introspect_tokens\":true,\n    \"trusted_uri_prefixes\":[\n      \"https://$ICP_CONSOLE\",\n      \"https://$CLOUDFORMS_HOST\"\n    ],\n    \"redirect_uris\":[\n      \"https://$ICP_CONSOLE/auth/liberty/callback\",\n      \"https://$CLOUDFORMS_HOST/oidc_login/redirect_uri\"\n    ]\n  }\n`}</code></pre>\n        <p parentName=\"li\">{`  Then run this command.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`cloudctl iam oauth-client-register -f registration.json\n`}</code></pre>\n        <p parentName=\"li\">{`  Collect the client secret that is generated.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Extract the MCM certificate and save it as a TRUSTED certificate.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`kubectl get secret -n kube-public ibmcloud-cluster-ca-cert -o jsonpath='{.data.ca\\\\.crt}' | base64 --decode | sed 's/CERTIFICATE/TRUSTED CERTIFICATE/' > ibm-mcm-ca.crt\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Copy the `}<inlineCode parentName=\"p\">{`ibm-mcm-ca.crt`}</inlineCode>{` file to the CloudForms machine in the path\nof `}<inlineCode parentName=\"p\">{`/etc/pki/ca-trust/source/anchors`}</inlineCode>{`. Run the following command. `}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`update-ca-trust\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Restart the CloudForms engine. `}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`systemctl restart evmserverd\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run the following commands to copy oidc configurations:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`TEMPLATE_DIR=\"/opt/rh/cfme-appliance/TEMPLATE\"\ncp \\${TEMPLATE_DIR}/etc/httpd/conf.d/manageiq-remote-user-openidc.conf /etc/httpd/conf.d/\ncp \\${TEMPLATE_DIR}/etc/httpd/conf.d/manageiq-external-auth-openidc.conf.erb /etc/httpd/conf.d/manageiq-external-auth-openidc.conf\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Update the `}<inlineCode parentName=\"p\">{`/etc/httpd/conf.d/manageiq-external-auth-openidc.conf`}</inlineCode>{` file as follows.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`LoadModule          auth_openidc_module modules/mod_auth_openidc.so\nServerName          https://$CLOUDFORMS_HOST\n\nOIDCCLientID                   $CLOUDFORMS_CLIENT_ID\nOIDCClientSecret               $CLOUDFORMS_CLIENT_SECRET\nOIDCRedirectURI                https://$CLOUDFORMS_HOST/oidc_login/redirect_uri\nOIDCCryptoPassphrase           $CLOUDFORMS_PASSPHRASE\nOIDCOAuthRemoteUserClaim       sub\nOIDCRemoteUserClaim            name\n\nOIDCProviderIssuer                  https://127.0.0.1:443/idauth/oidc/endpoint/OP\nOIDCProviderAuthorizationEndpoint   https://$ICP_CONSOLE/idprovider/v1/auth/authorize\nOIDCProviderTokenEndpoint           https://$ICP_CONSOLE/idprovider/v1/auth/token\nOIDCOAuthIntrospectionEndpoint      https://$ICP_CONSOLE/idprovider/v1/auth/introspect\nOIDCProviderJwksUri                 https://$ICP_CONSOLE/oidc/endpoint/OP/jwk\nOIDCProviderEndSessionEndpoint      https://$ICP_CONSOLE/idprovider/v1/auth/logout\n\nOIDCScope                        \"openid email profile\"\nOIDCResponseMode                 \"query\"\nOIDCProviderTokenEndpointAuth     client_secret_post\n\nOIDCPassUserInfoAs json\nOIDCSSLValidateServer off\nOIDCHTTPTimeoutShort 10\n\n<Location /oidc_login>\n  AuthType  openid-connect\n  Require   valid-user\n  LogLevel   warn\n</Location>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Restart httpd. `}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`systemctl restart httpd\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Open the CloudForms Web UI and log in as `}<inlineCode parentName=\"p\">{`admin`}</inlineCode>{`, then select the\nConfiguration by clicking the gear icon.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Select `}<strong parentName=\"p\">{`Settings`}</strong>{`, then select the `}<strong parentName=\"p\">{`Authentication`}</strong>{` tab.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the Authentication section, set the Mode to `}<strong parentName=\"p\">{`External (httpd)`}</strong>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the External Authentication (httpd) Settings section, set the\nProvider Type to `}<strong parentName=\"p\">{`Enable OpenID-Connect`}</strong>{`.`}</p>\n        <InlineNotification mdxType=\"InlineNotification\">\nThis setting enables the OIDC login button on the login screen, \nthat redirects to the OIDC protected page for authentication, and supports \nthe OIDC logout process. \n        </InlineNotification>\n        <InlineNotification mdxType=\"InlineNotification\">\nAs an optional step, in the External Authentication (httpd) Settings section, \nselect Enable Single Sign-On. If you select this option, the initial access to the Appliance \nAdministrative UI will redirect to the OIDC Identity Provider \nauthentication screen.\n        </InlineNotification>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the Role Settings section, select the\n`}<strong parentName=\"p\">{`Get User Groups from External Authentication (httpd)`}</strong>{` setting.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Select `}<strong parentName=\"p\">{`Access Control`}</strong>{`. Make sure the user’s groups are created\non the Appliance and appropriate roles are assigned to those groups.`}</p>\n        <InlineNotification mdxType=\"InlineNotification\">\nThe name of the group must match the name of the LDAP group used for granting access to the ICP Console\n        </InlineNotification>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Click `}<strong parentName=\"p\">{`Save`}</strong>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Log out from CloudForms, and refresh your browser.  If you enabled SSO, it will redirect you to the ICP Console logon screen.  If not, click on `}<inlineCode parentName=\"p\">{`Log in to Corporate System`}</inlineCode></p>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}